type Note {
  id: ID!
  title: String!
  text: String!
  createdAt: String
  updatedAt: String
  owner: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelNoteConnection {
  items: [Note]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelNoteFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  text: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelNoteFilterInput]
  or: [ModelNoteFilterInput]
  not: ModelNoteFilterInput
}

type Query {
  getNote(id: ID!): Note
  listNotes(filter: ModelNoteFilterInput, limit: Int, nextToken: String): ModelNoteConnection
}

input CreateNoteInput {
  id: ID
  title: String!
  text: String!
  createdAt: String
  updatedAt: String
}

input UpdateNoteInput {
  id: ID!
  title: String
  text: String
  createdAt: String
  updatedAt: String
}

input DeleteNoteInput {
  id: ID
}

type Mutation {
  createNote(input: CreateNoteInput!, condition: ModelNoteConditionInput): Note
  updateNote(input: UpdateNoteInput!, condition: ModelNoteConditionInput): Note
  deleteNote(input: DeleteNoteInput!, condition: ModelNoteConditionInput): Note
}

input ModelNoteConditionInput {
  title: ModelStringInput
  text: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelNoteConditionInput]
  or: [ModelNoteConditionInput]
  not: ModelNoteConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onCreateNote(owner: String!): Note @aws_subscribe(mutations: ["createNote"])
  onUpdateNote(owner: String!): Note @aws_subscribe(mutations: ["updateNote"])
  onDeleteNote(owner: String!): Note @aws_subscribe(mutations: ["deleteNote"])
}
